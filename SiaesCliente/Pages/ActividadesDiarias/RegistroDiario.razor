@page "/registrodiario"
@using SiaesLibraryShared.Contracts;
@using SiaesLibraryShared.Models.Dtos;
@using SiaesCliente.Servicios;
@using System.Net.Http.Headers
@inject IServicioProcesoRepositorio ProcesoService
@inject IServicioSubProcesoRepositorio SubProcesoService
@inject IServicioActividadMacroRepositorio ActividadMacroService
@inject IServicioTUbicacion TUbicacionService
@inject IServicioTRegistroDiario RegistroDiarioService
@inject IServicioTiempoInvertidoServicio TiempoInvertido
@inject IServicioUsuarioRepositorio UsuarioService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ILogger<RegistroDiario> Logger

<h1 class="text-center">Registrar Actividad Realizada</h1>

<div class="card">
    <div class="card-header">
        <h4 class="card-title text-dark">Nueva Actividad</h4>
    </div>
    <div class="card-body">
        <EditForm Model="@RegistroDiarioModel" OnValidSubmit="@ManejadorOnRegistrarActividad">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <ValidationSummary></ValidationSummary>

            <div class="form-group">
                <label>Tiempo Invertido Hoy:</label>
                <span>@TiempoInvertidoHoy.ToString("0.00") horas</span>
            </div>

            <div class="form-group">
                <label>Fecha Actividad:</label>
                <InputDate @bind-Value="RegistroDiarioModel.FechaActividad" class="form-control"></InputDate>
                <ValidationMessage For="() => RegistroDiarioModel.FechaActividad"></ValidationMessage>
            </div>

            <div class="form-group">
                <label>Modalidad:</label>
                <InputSelect @bind-Value="RegistroDiarioModel.IdUbicacion" class="form-control">
                    @if (Ubicaciones != null)
                    {
                    @foreach (var ubicacion in Ubicaciones)
                    {
                        <option value="@ubicacion.IdUbicacion">@ubicacion.DescripcionUbicacion</option>
                    }
                    }
                </InputSelect>
                <ValidationMessage For="() => RegistroDiarioModel.IdUbicacion"></ValidationMessage>
            </div>

            <div class="form-group">
                <label>Proceso:</label>
                <InputSelect @bind-Value="ProcesoSeleccionado" class="form-control" @onchange="OnProcesoChange">
                    <option value="">Seleccione un proceso</option>
                    @if (Procesos != null)
                    {
                        @foreach (var proceso in Procesos)
                        {
                            <option value="@proceso.IdProceso">@proceso.DescripcionProceso</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => ProcesoSeleccionado"></ValidationMessage>
            </div>

            <div class="form-group">
                <label>Subproceso:</label>
                <InputSelect @bind-Value="RegistroDiarioModel.IdDetalleProceso" class="form-control">
                    <option value="">Seleccione un subproceso</option>
                    @if (SubProcesos != null)
                    {
                        @foreach (var subproceso in SubProcesos)
                        {
                            <option value="@subproceso.IdSubProceso">@subproceso.DescripcionSubProceso</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => RegistroDiarioModel.IdDetalleProceso"></ValidationMessage>
            </div>

            <div class="form-group">
                <label>Actividad Macro:</label>
                <InputSelect @bind-Value="RegistroDiarioModel.IdActividadMacro" class="form-control">
                    <option value="">Seleccione una actividad macro</option>
                    @if (ActividadesMacro != null)
                    {
                        @foreach (var actividadMacro in ActividadesMacro)
                        {
                            <option value="@actividadMacro.IdActividadMacro">@actividadMacro.DescripcionMacro</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="() => RegistroDiarioModel.IdActividadMacro"></ValidationMessage>
            </div>

            <div class="form-group">
                <label>Observaciones:</label>
                <InputTextArea @bind-Value="RegistroDiarioModel.Observacion" class="form-control"></InputTextArea>
                <ValidationMessage For="() => RegistroDiarioModel.Observacion"></ValidationMessage>
            </div>

            <div class="form-group">
                <label>Tiempo Invertido:</label>
                <InputText @bind-Value="TiempoInvertidoSeleccionado" class="form-control" type="time" step="900" />
                <ValidationMessage For="@(() => RegistroDiarioModel.TiempoInvertido)"></ValidationMessage>
            </div>

            <button type="submit" class="btn btn-primary">Registrar Actividad</button>
        </EditForm>
    </div>
</div>

@code {
    private RegistroDiarioCreacionDTO RegistroDiarioModel { get; set; } = new RegistroDiarioCreacionDTO();
    private decimal TiempoInvertidoHoy { get; set; }
    private IEnumerable<ProcesoDTO> Procesos { get; set; }
    private IEnumerable<SubProcesoDTO> SubProcesos { get; set; }
    private IEnumerable<TActividadMacroDTO> ActividadesMacro { get; set; }
    private IEnumerable<TUbicacionDTO> Ubicaciones { get; set; }
    private UsuarioLocalStorage Usuario { get; set; }
    private int ProcesoSeleccionado { get; set; }
    private string tiempoInvertidoSeleccionado;

    private string TiempoInvertidoSeleccionado
    {
        get => tiempoInvertidoSeleccionado;
        set
        {
            tiempoInvertidoSeleccionado = value;
            if (TimeSpan.TryParse(value, out var timeSpan))
            {
                RegistroDiarioModel.TiempoInvertido = (decimal)timeSpan.TotalHours;
            }
            else
            {
                RegistroDiarioModel.TiempoInvertido = 0;
            }
        }
    }
  

    protected override async Task OnInitializedAsync()
    {
        RegistroDiarioModel.FechaActividad = DateTime.Today;
       

        // Obtener el nombre de usuario y el código de establecimiento del almacenamiento local
        var nombreUsuario = await LocalStorage.GetItemAsync<string>("nombreUsuario");
        var codEstablecimiento = await LocalStorage.GetItemAsync<int>("unidad");

        // Llamar al servicio ObtenerUsuarioId pasando los valores obtenidos del almacenamiento local
        var usuario = await UsuarioService.ObtenerUsuarioId(nombreUsuario, codEstablecimiento);

         

            if (usuario != null)
            {
                // Guardar los datos del usuario en el localStorage
                var usuarioLocalStorage = new UsuarioLocalStorage
                    {
                        Id = usuario.Id,
                        IdRol = usuario.IdRol,
                        IdSubArea = usuario.IdSubArea
                    };
                await LocalStorage.SetItemAsync("UsuarioLocalStorage", usuarioLocalStorage);
            }
        

        await CargarTiempoInvertidoHoy();
        await CargarProcesos();
        await CargarActividadesMacro();
        await CargarUbicaciones();
        RegistroDiarioModel.IdUbicacion = 1; // Valor por defecto para Teletrabajo
    }

    private async Task CargarTiempoInvertidoHoy()
    {
        var usuarioLocalStorage = await LocalStorage.GetItemAsync<UsuarioLocalStorage>("UsuarioLocalStorage");
        var idFuncionario = usuarioLocalStorage?.Id ?? 0;
        var fechaActividad = DateTime.Today;


        TiempoInvertidoHoy = await TiempoInvertido.GetTotalTiempoInvertidoAsync(idFuncionario, fechaActividad);
    }

    private async Task CargarProcesos()
    {
        Procesos = await ProcesoService.GetProcesosAsync();
    }

    private async Task CargarSubProcesos(int procesoId)
    {
        SubProcesos = await SubProcesoService.GetSubProcesosByProcesoIdAsync(procesoId);
    }

    private async Task CargarActividadesMacro()
    {
        ActividadesMacro = await ActividadMacroService.GetActividadesMacroAsync();
    }

    private async Task CargarUbicaciones()
    {
        Ubicaciones = await TUbicacionService.GetUbicacionAsync();
    }

    private async Task OnProcesoChange(ChangeEventArgs e)
    {
        ProcesoSeleccionado = Convert.ToInt32(e.Value);
        await CargarSubProcesos(ProcesoSeleccionado);
    }

    private async Task ManejadorOnRegistrarActividad()
    {
        var nombreUsuario = await LocalStorage.GetItemAsync<string>("nombreUsuario");
        var codEstablecimiento = await LocalStorage.GetItemAsync<int>("unidad");
        try
        {
            // Convertir RegistroDiarioCreacionDTO a TRegistroDiarioDTO
            var registroDiarioDTO = new TRegistroDiarioDTO
                {
                    IdFuncionario = RegistroDiarioModel.IdFuncionario,
                    NombreUsuario = RegistroDiarioModel.NombreUsuario,
                    UP = RegistroDiarioModel.UP,
                    FechaActividad = RegistroDiarioModel.FechaActividad,
                    IdDetalleProceso = RegistroDiarioModel.IdDetalleProceso,
                    IdActividadMacro = RegistroDiarioModel.IdActividadMacro,
                    Observacion = RegistroDiarioModel.Observacion,
                    TiempoInvertido = (int)RegistroDiarioModel.TiempoInvertido,
                    IdSubArea = RegistroDiarioModel.IdSubArea ?? 0,
                    IdUbicacion = RegistroDiarioModel.IdUbicacion ?? 0,
                    UsuarioIngreso = RegistroDiarioModel.UsuarioIngreso,
                    FechaIngreso = RegistroDiarioModel.FechaIngreso
                };

            var resultado = await RegistroDiarioService.CrearRegistroDiario(registroDiarioDTO);

            if (resultado)
            {
                await JSRuntime.ToastrSuccess("Registro diario creado correctamente");
            }
            else
            {
                await JSRuntime.ToastrError("Error al crear el registro diario");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error al crear el registro diario");
            await JSRuntime.ToastrError("Error al crear el registro diario");
        }
    }
}